@page
@model Xerp.Pages.App.EmployeeManagementModel
@{
}

<main class="ms-sm-auto px-md-4">
    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>
                <button type="button" class="btn btn-sm btn-outline-secondary">Export</button>
            </div>
        </div>
    </div>

    <div x-data="employeesTable" x-init="hydrateTableData">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center p-0 mb-0">
            <h2 class="h3">Employees</h2>
            <div class="btn-toolbar mb-2 mb-md-0">
                <button type="button" class="btn btn-sm btn-outline-secondary" @@click="hydrateTableData">
                    Reload
                </button>
            </div>
        </div>

        <div class="table-responsive">
            <template x-if="!isLoadedData">
                <div>Loading...</div>
            </template>
            <template x-if="isLoadedData">
                <table class="table table-striped table-sm">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Header</th>
                            <th scope="col">Header</th>
                            <th scope="col">Header</th>
                            <th scope="col">Header</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="d in tableData">
                            <tr>
                                <td>1,001</td>
                                <td x-text="d.name"></td>
                                <td>data</td>
                                <td>placeholder</td>
                                <td>text</td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </template>


        </div>
    </div>
</main>

<script>
    // declare component handlers
    let employeesTable = () => ({
        tableData: [],
        isLoadedData: false,
        hydrateTableData() {
            this.isLoadedData = false;
            this.tableData = [];
            this.getPokemons()
                .then((res) => this.tableData = res)
                .then(() => this.isLoadedData = true)
        },
        // pass this as callback
        getPokemons() {
            return fetch('https://pokeapi.co/api/v2/pokemon/')
                .then((response) => response.json())
                .then((json) => json.results)
        }
    })

    // init components
    document.addEventListener('alpine:init', () => {
        Alpine.data('dropdown', dropdown)
        Alpine.data('employeesTable', employeesTable)
    })
</script>
